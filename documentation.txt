****Installation Steps:****
1. Create flaskblog
    mkdir flaskblog
2. cd flaskblog
3. create environment
    python3 -m venv venv
4. activate the environment
    venv\Scripts\activate
5. Install flask
    pip install Flask
6. Install wt-forms
    pip install flask-wtf
7. Install flask-sqlalchemy for database connectivity
    pip install flask-sqlalchemy
8. Install flask-bcrypt to hash passwords
    pip install flask-bcrypt
9. Install flask-login to handle login errors
    pip install flask-login

===========================================
****Database creation and deletion****
must be in the project directory for the imports to work.
1. Intiate python terminal
2. from flaskblog import db     #flaskblog is our application file and db is the sqlalchemy db instance that we created.
3. create database.
    db.create_all()
4. We can add data to the database models both using command line and using the application.
    For command line,
    1. from flaskblog import User, Post
    2. create user instance:
        user_1 = User(username = 'Corey', email='C@gmail.com', password='password') 
    3. add the user to db
        add changes
        db.session.add(user_1) 
        commit changes
        db.session.commit()
5. Delete all rows and drop all tables:
    db.drop_all()

=======================================
****Steps to run the files***
    python flaskblog.py

**** to remove .vscode from git: git rm --cached .vscode/settings.json****

After restructuring code into packages, to run the application,
    python run.py
=======================================
**** Imp Notes****

* in flask html files need to be located in templates folder 
* and the static files like css and javascript files need to be in static folder.

1. app = Flask(__name__)
    Instantiated Flask application in app
    Here __name__ is special variable in python which is just the name of the module. Basically, that is to let python know where to start execution from; know about the static files and the main method. This is similar to writing p.s.v.main() as in Java.
    
    @app.route('/')
    def hello():
        return 'Hello, World!'
    In Flask, routes are created using route decorators - to add addittional functionality to existing functions.
    In this case, app.route decorator will handle all of the complicated backend stuff and simply allow us to write a function that returns the information to be shown on our website for '/' route which represents a root page of a website. Here the function hello() returns "Hello world" when a user lands on the root page.

2. Template inheritance
    Having all the repeated code lines in a single file so that there is only one place to make changes. This frees the files from having repeated code and have only code that is unique to their respective pages.

3. url-for:
    function that will find the exact location of the routes for us so that we don't need to worry about it in the background.

4. wtforms
    - for secret key we used secrets.token_hex(16) to generate a 16bit token for the application.
    - form.hidden_tag() used to add a CSRF (Cross Site Request Forgery) token to protect qpplication from attacks
    - form validators, error handlers, different classes for form fields

5. Database support - SqlAlchemy - popular ORM(Object Relational Mapper - it makes it easy for us to connect to database and use it in an object oriented way. Can use different databases without changing your python code.)
    will be using SQLite for database during development and switch to PostgreSQL for production
    there is a regular sqlalchemy package but flask-sqlalchemy is flask specific package that provides support for several defaults and helpers for the application.
    with sqlite, we can specify relative path with three forward slashes in the uri. (sqlite:///) 
    * a great thing about sqlalchemy is we can represent our database structure as classes. Those classes are called models.
    
    #create user class to hold all users. This imports db.Model 
    class User(db.Model):
        # columns for the table : column_name = db.Column(column_type, primary_key[optional])
        id = db.Column(db.Integer,primary_key = True)

6. Magic methods or Dunder methods: https://medium.com/python-features/magic-methods-demystified-3c9e93144bf7
    Dunder- Double underscores
    Commonly used for operator overloading. e.g., __init__, __len__, __repr__, __add__ etc.,

    def __repr__()
    This method determines how our object will be printed when ever we print it. Another similar method is __str__
    * basically to provide the user the rights to determine how he wants an object to be printed.

    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
        here datetime.utcnow means if the date_posted field is empty, the field will have a default current time assigned to it.
        datetime.utcnow() would trigger the function to execute and the default would have a date instead of a function that generates date. We want the default to be a function that executes and not a hard value indicating the current time.

7. User and Post models will have a one to many relationship because the users will be the authors of the post. One user multiple Posts.
    posts = db.relationship('Post', backref='author',lazy=True)
    defines a relationship btw User and Post model. Signifies that the posts attribute under User model references the Post model's author attribute.
    backref provides the Post model's attribute to which the User model refers.
    lazy defines when sqlalchemy loads the data from database. True means sqlalchemy will load the data as necessary in one go. Convenient because: with this relationship we will be able to use this attribute to get all of the posts created by an individual user at once.
    
    *** Note that this line (posts = db.relationship('Post', backref='author',lazy=True)) does not create a column in User model. It just specifies the relationship to run a query in the background to fetch all the posts written by a particular user.

8. 
    posts = db.relationship('Post', backref='author',lazy=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    uppercase Post : referencing the actual Post class
    lowercase user : referencing the table name and column name
    * So by default, the User model has the tablename set to user(lowercase) and the Post model will have a table name set to post(lowercase)
    We can set our own table name using tablename attribute.
    * We create database after our data models are ready. similar to having the schema ready before we actually create tables.

9. Database creation using command shell/terminal

    user_1 = User(username = 'Corey', email='C@gmail.com', password='password') 
        -> not setting id and image_file becuase id is pk and is autopopulated with unique values and image_file has a default value.

    db.session.add(user_1) 
        -> this line does not actually add the user to database. We just notified the db that we have a change to make. We can have several such changes and commit those changes to the database.
    we can create multiple users as such and commit.
        user_2 = User(username = 'John', email='J@gmail.com', password='password')
        db.session.add(user_2)
    Now that we have all the changes resady, we can commit.
    db.session.commit()

10. Common Database queries:
    - User.query.all() -> returns list of all the users.
        >>> User.query.all()
            [User('Corey','C@gmail.com','default.jpg'), User('John','J@gmail.com','default.jpg')]
    - User.query.first() -> returns first user in the list
        >>> User.query.first()
            User('Corey','C@gmail.com','default.jpg')
    - User.query.filter_by(username='Corey').all() -> returns all users with username Corey
    - User.query.filter_by(username='Corey').first()
        >>> user = User.query.filter_by(username='Corey').first()
        >>> user.id
            1
        >>> user = User.query.get(1) -> returns a user with id=1
        >>> user
            User('Corey','C@gmail.com','default.jpg')
        
        >>> post_1 = Post(title='Blog1',  content='First blog', user_id=user.id)
        >>> post_2 = Post(title='Blog2',  content='second  blog', user_id=user.id) 
        >>> db.session.add(post_1)
        >>> db.session.add(post_2)
        >>> db.session.commit()
        >>> user.posts
            [User('Blog1','2020-08-06 19:10:32.014352'), User('Blog2','2020-08-06 19:10:32.020516')]
        
        >>> post = Post.query.first()
        >>> post
            User('Blog1','2020-08-06 19:10:32.014352')
        >>> post.user_id -> has access to the user id 
            1
        >>> post.author -> can access the entire user object who created the post using the backref relationship author.
            User('Corey','C@gmail.com','default.jpg')

    - Delete all the rows and drop all the tables:
        db.drop_all()        

11. Package structure and its advantages
        * Circular import error: when python encounters "from models import User,Post" the control shifts to models.py file where the second line is "from flaskblog import db" which takes the control back to flaskblog.py and execution begins again from the first line until the models.py import is called. An interdependency is created here between the two files leading to a circular loop. This is because, for the first time my flaskblog.py is considered as the __main__ file by the compiler and the second time as flaskblog.py.
        So if we do "from __main__ import db" in models.py, it eliminates the circular import error. But throws "cannot import name db" error. This is because at that point when models.py imports db, the instance is not yet created. We can perform a work around for this case by listing the "from models import User,Post" after the db instance is created(db = SqlAlchemy(app)) but this ugly alternative is bound to fail when we try accessing the database using commandline. Because, in command line, the __main__ isn't the flaskblog.py anymore.. So this quick fix isn't sufficient.
        Thus we have to segregate the code into packages that will solve such connectivity problems as we will not have to run flaskblog directly. That way we eliminate all the import issues.

        In order to tell python that your directory is a package, we need an __init__.py file that has the same name as the application itself.
        
        * The __init__.py runs internally(even before the run.py is executed, more like a static method that executes on load) when the run.py is executed. run.py only contains the main function.
12. User Authentication:
    Hash passwords: flask-bcrypt -> everytime genereate_password_hash is run, it generates a different hash. We need another method, checkpassword that checks for the generated password with that of the user.
        >>> from flask_bcrypt import Bcrypt
        >>> bcrypt = Bcrypt()
        >>> bcrypt.generate_password_hash('testing')
                b'$2b$12$V2vBw7.ju0Og4JlGPc5i/O3zPHdwuJ7/erskYGISiI2cpHiwyzlEe'
        >>> bcrypt.generate_password_hash('testing').decode('utf-8')
                '$2b$12$OmGqTnEzn8FWolmasmcnV.c13AAwVgS5ZZyTznvxpcu7/2RFbkLWe'
        >>> hashed_pw = bcrypt.generate_password_hash('testing').decode('utf-8')
        >>> bcrypt.check_password_hash(hashed_pw, 'password')
        False
        >>> bcrypt.check_password_hash(hashed_pw, 'testing') 
        True

    import and initialize bcrypt in __init__.py

13. Be very careful with the debugger mode when working on confidential projects. any flask error can provide an easy entry point for someone to view and edit the code using the web application debugger pin.
14. sqlalchemy.exc.IntegrityError
        caused when the username already exists in the database.
        better to add form validators to check for duplicate entries.

15. Handled registration errors using customized validators in the forms.py. For login, there is login_manager library (flask-login extension) that handles all te login related issues.
16. Login Manager:
    import and initialize login_manager in __init__.py
    - we add some functionality in our database models and this will handle all the sessions in the background for us.
    - create function (load_user) with decorator called user_loader - for reloading the user from user id stored in the session.
    - this decorator expects User model to have certain attributes(3) and methods(1) - isAuthenticated, isActive, isAnonymous, get_id(). The extension provides us with a class that we can inherit from that will add all these attributes and methods for us.
    -import class(UserMixin) from flask_login, change the routes file to getthe login checks.

17. If already logged in, the login and register links must not work. Can be handled using current_user from flask_login. create logout route.
18. In order to make the user login before accessing content, we can leverage login_required in flask_login package. Use this decorator in routes.py. But the login_manager needs to know what function must be called when the control hits the login_required decorator, so specify that function in init.py.
19. next_page = request.args.get('next')
    args is a dictionary but if we access args[keys] then it will throw error if the key is not found. So use args.get() because this returns None if the key does not exist in the dictionary.

20. added features: update profile , update image, resize image using Pillow, added validators for accepted image types.
    * imp: using the enctype='multipart/form-data' to be able to display any issues that might occur with the image uploads.
    * also added save picture to database feature. To avoid conflicts with same picture name, converted the filenames to hex formats using secrets. Then to extract the file type that the user used, we used os library that helps us grab the input file name along with extension and then grab the type.
     _, fext = os.path.splitext(form_picture.filename)
     fext is the file extension that we extracted.

     inorder to store the picture under the user_profile_pics folder, we use the line, 
     picture_path = os.path.join(app.root_path, 'static/user_profile_pics', pict_fn) where pict_fn is the hex_filename.fext

     i = Image.open(form_picture)
    i.thumbnail(output_size)
    are for resizing the file to 125x125

    also made changes to the forms.py to include the image field in the userAccount form.
    

21. create/update/delete a post
    - create_post.html + new post route in routes.py and PostForm in forms.py + link to the page in Navigation bar in layout.html

    post.date_posted.strftime('%Y-%m-%d')
    Without the strftime formatting, the date_posted field was the datetime plus timestamp. So we convert it to only year-month-date format.

    for a user to be able to fetch a particular post, create a route to accept the id number and fetch it from the database. ( feature provided by flask for a user to create variables within actual routes)
    @app.route("/post/<post_id>) -> /post/1 navigates to post1. Can make the type more specific. Using, @app.route("/post/<int:post_id">)

    making updates and deleting a post mus not be an accident, so we'll include those in the single template for the user to be able to cross verify.
    delete operation is pretty interesting with the modal. After the user clicks on delete, the modal delete botton hits the delete_post route and we delete the post from the database.

22. Pagination + sort the posts from newest to oldest
    -->> hurray created first script to load posts using json file.

    per_page argument determines the number of posts that are to be displayed on every page.
    iter_pages -> used to iterate over the pages (like a navigator)
        has a lot of parameters that let us define the number of pages to display, like only have "prev, current and next" or have "start, .. prev, current, next, .. end".
        right_current = 2 because this also includes the current page.

23. To obtain the newest posts on top and the older posts towards the last pages.
    need to modify the query to reorder. connecting the query, ordering by desc before paginating.
    posts = Post.query.order_by(Post.date_posted.desc()).paginate(page = page, per_page = 5)

--> when clicked for a specific user, returns the total posts byt that user, provides pagination only for that user's posts and also sorts the posts in descending order on date_posted.
    in order to route to the user's posts page when clicked on the username, currently we had to change urls on 3 templates user_posts, home and display_post. This is not a good practice and needs to be modified at a later point.

    
**** https://www.youtube.com/watch?v=jTiyt6W1Qpo for flask sqlalchemy explanation ****
*******pip freeze > requirements.txt*******